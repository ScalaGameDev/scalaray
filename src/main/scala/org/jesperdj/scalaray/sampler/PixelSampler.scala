/*
 * ScalaRay - Ray tracer based on pbrt (see http://pbrt.org) written in Scala 2.8
 * Copyright (C) 2009, 2010  Jesper de Jong
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jesperdj.scalaray.sampler

import scala.collection.immutable.{ IndexedSeq, Traversable }

import org.jesperdj.scalaray.raster.Rectangle

// Sampler that generates samples for one pixel at a time
abstract class PixelSampler (rectangle: Rectangle, samplesPerPixel: Int) extends Sampler(rectangle, samplesPerPixel) {
	// The samples generated by this sampler
	val samples: Traversable[Sample] = new Traversable[Sample] {
		def foreach[U](f: Sample => U): Unit =
			for (y <- rectangle.top to rectangle.bottom; x <- rectangle.left to rectangle.right) { generateSamples(x, y) foreach f }
	}

	// Generate samples for one pixel
	protected def generateSamples(x: Int, y: Int): IndexedSeq[Sample]
}
