/*
 * ScalaRay - Ray tracer based on pbrt (see http://pbrt.org) written in Scala 2.8
 * Copyright (C) 2009, 2010  Jesper de Jong
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jesperdj.scalaray.sampler

import scala.collection.immutable.Traversable

import org.jesperdj.scalaray.raster.Rectangle

// TODO: I don't like the split() method here. It forces me to first create a sampler for the whole image but the only purpose that sampler has
// is to split it into subsamplers. The sampler for the whole image should not have to be created in the first place.
// Find a solution with a sampler factory in some form to make the subsamplers directly so that it's not necessary to create a dummy sampler
// for the whole image. That sampler factory should be passed to the renderer, who knows how many subsamplers it wants to make.

// Sampler (pbrt 7.2)
abstract class Sampler (val rectangle: Rectangle, val samplesPerPixel: Int) {
	// The samples generated by this sampler
	val samples: Traversable[Sample]

	// Split the sampler into a number of sub-samplers (for multiprocessing)
	def split(count: Int): Traversable[Sampler]
}
